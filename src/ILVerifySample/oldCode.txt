verifier
    private IEnumerable<VerificationResult> VerifyInterface(EcmaModule module, TypeDefinitionHandle typeDefinitionHandle)
        {
            EcmaType type = (EcmaType)module.GetObject(typeDefinitionHandle);
            
            TmpLogToRemove(type.Name);
             var builder = new ArrayBuilder<VerificationResult>();            
             foreach (DefType interfaceDef in type.ExplicitlyImplementedInterfaces)
            {                           
                foreach (MethodDesc interfaceMethodDesc in interfaceDef.GetAllMethods())
                {
                    // MethodDesc mimpl = type.ResolveInterfaceMethodTarget(interfaceMethodDesc);
                    // MethodDesc mimpl = type.ResolveInterfaceMethodToVirtualMethodOnType(interfaceMethodDesc);
                    var mi = MetadataVirtualMethodAlgorithm.ResolveVariantInterfaceMethodToVirtualMethodOnType(interfaceMethodDesc, type);
                }
            }
             return builder.ToArray();
        }

program.cs

           foreach (TypeDefinitionHandle typeHandle in metadataReader.TypeDefinitions)
            {
                // get fully qualified type name
                var className = GetQualifiedClassName(metadataReader, typeHandle);
                bool verifying = ShouldVerify(className);
                if (_verbose)
                {
                    Write(verifying ? "Verifying " : "Skipping ");
                    WriteLine(className);
                }
                 if (verifying)
                {
                    var results = _verifier.VerifyInterface(peReader, typeHandle);
                    foreach (var result in results)
                    {
                        PrintResult(result, module, path);
                        numErrors++;
                    }
                }
            }


       /// <summary>
        /// This method returns the fully qualified class name.
        /// </summary>
        private string GetQualifiedClassName(MetadataReader metadataReader, TypeDefinitionHandle typeHandle)
        {
            var typeDef = metadataReader.GetTypeDefinition(typeHandle);
             var typeName = metadataReader.GetString(typeDef.Name);
            var namespaceName = metadataReader.GetString(typeDef.Namespace);
            var assemblyName = metadataReader.GetString(metadataReader.IsAssembly ? metadataReader.GetAssemblyDefinition().Name : metadataReader.GetModuleDefinition().Name);
             StringBuilder builder = new StringBuilder();
            builder.Append($"[{assemblyName}]");
            if (!string.IsNullOrEmpty(namespaceName))
                builder.Append($"{namespaceName}.");
            builder.Append($"{typeName}");
             return builder.ToString();
        }

private bool ShouldVerify(string methodName)
        {	        {
            if (_includePatterns.Count > 0 && !_includePatterns.Any(p => p.IsMatch(methodName)))	            if (_includePatterns.Count > 0 && !_includePatterns.Any(p => p.IsMatch(methodName)))
            {	            {